#!/bin/sh

# Package dependencies:
# TLDR: fzf, POSIX shell (dash, bash, zsh etc.) and base packages (base, base-devel or equivalents)
#
# All programs used:
#     1. fzf (https://github.com/junegunn/fzf)
#     2. standard utils provided by base and base-devel packages in Linux distros:
#        realpath, echo, printf (GNU coreutils)
#        grep (GNU grep)
#        gawk (GNU awk)
#        sed (GNU sed)
#        diff (GNU diffutils)
#        xargs (GNU findutils)

prname="kankyou"  # program name

say () {
    printf "%s\n" "$1"
}

getAns () {
    # $1 = opt1, $2 = opt2, $3 = question, $4 = ans
    printf "%s [%s/%s] " "$3" "$1" "$2"
    read -r _ans
    if [ ! "$_ans" = "$1" ]; then
       [ ! "$_ans" = "$2" ] && getAns "$1" "$2" "$3" "$4"
    else
       eval "$4"="'$_ans'" ; unset _ans
    fi
}

displayHelp () {
   echo "Usage: $prname [ONE OPTION] \$CLONE \$REAL"
   echo
   echo "DESCRIPTION"
   echo "\$CLONE is a clone of the \$REAL environment, usually for backup purposes."
   echo "If not explicitly specified, \$REAL is set to \$HOME by default."
   echo "For instance, REAL=\$HOME and CLONE=\$HOME/.dotfiles."
   echo "The variable \$TARGET is the file selected by the user, with its path relative to \$REAL."
   echo
   echo "OPTIONS"
   echo "-h    Print this help message."
   echo "-n    Compare existing, but different files with the same name [default mode]."
   echo "-m    Show missing files."
   echo "-c    Overwrite \$CLONE/\$TARGET to be up to date with REAL/\$TARGET."
   echo "-r    Overwrite \$REAL/\$TARGET to be up to date with CLONE/\$TARGET."
   echo "-d    Print variables, debug only."
}

getVariables () {
   if [ "$3" -gt 2 ]; then
      echo "$prname: too many arguments. I accept at most 2." >&2
      exit 1
   elif [ "$3" -lt 1 ]; then
      echo "$prname: not enough arguments. You need to specify at least the source path." >&2
      echo "         maybe you intended '$prname .'?" >&2
      exit 1
   elif [ "$3" = 1 ]; then
      REAL="$HOME"
   else
      REAL="$(realpath "$2")"
   fi
   CLONE="$(realpath "$1")"
}

getTargetFiles () {
   FILES=$(diff -qr "$CLONE" "$REAL" | grep -v '^Only in' | awk '{print $2} {print $4}')
   if [ -z "$FILES" ]; then
      echo "$prname: no different files sharing the same name in the specified directories." >&2
      echo "         there are three possibilities:" >&2
      echo "         1. the directories are up to date with each other." >&2
      echo "         2. did you really specified the intended directories?" >&2
      echo "         3. do you have read permissions in both directories?" >&2
      exit 1
   else
      TARGET=$(echo "$FILES" | xargs -n 2 | awk '{print $2}' | xargs -n 1 realpath --relative-to="$REAL" | fzf)
   fi
   # if TARGET was not selected, exit
   [ -z "$TARGET" ] && exit 0
}

diffExisting () {
   echo "$FILES" | xargs -n 2 | grep "$TARGET" | xargs diff --color=always -- | less -R
}

showMissing () {
   diff -qr "$CLONE" "$REAL" | grep "^Only in" | grep -v "$CLONE" |
      sed "s/^Only in //;
           s/: /\//;
           s/\/home\/[a-zA-Z]*\///;
           /^[^\.]/d" | fzf            # THERE IS A PROBLEM IN THIS SED for './kankyou -d usr/ /usr/'
}

overwriteClone () {
   getAns "y" "n" "Are you sure you want to overwrite \$CLONE/$TARGET?" "OVERWRITE"
   [ "$OVERWRITE" != "y" ] && echo "Nothing was done." && exit 0
   cp "$REAL"/"$TARGET" "$CLONE"/"$TARGET" && echo "The file \$CLONE/$TARGET is now up to date with \$REAL." && exit 0
   echo "$prname: could not copy \$REAL/\$TARGET to \$CLONE/\$TARGET." >&2
   echo "         \$TARGET=\"$TARGET\"" >&2
   echo "         \$REAL=\"$REAL\"" >&2
   echo "         \$CLONE=\"$CLONE\"" >&2
   exit 1
}

overwriteReal () {
   echo "We are going to overwrite some file in your \$REAL directory. This may break up your system."
   getAns "y" "n" "Are you sure you want to overwrite \$REAL/$TARGET?" "OVERWRITE"
   [ "$OVERWRITE" != "y" ] && echo "Nothing was done." && exit 0
   cp "$CLONE"/"$TARGET" "$REAL"/"$TARGET" && echo "The file \$REAL/$TARGET is now up to date with \$CLONE." && exit 0
   echo "$prname: could not copy \$CLONE/\$TARGET to \$REAL/\$TARGET." >&2
   echo "         \$TARGET=\"$TARGET\"" >&2
   echo "         \$REAL=\"$REAL\"" >&2
   echo "         \$CLONE=\"$CLONE\"" >&2
   exit 1
}


while getopts ":hnmcrd:" option; do
   case $option in
   h) # display help
      displayHelp
      exit 0;;
   n) # normal, compare only existing different files
      shift
      getVariables "$1" "$2" "$#"
      getTargetFiles
      diffExisting
      exit 0;;
   m) # missing files
      shift
      getVariables "$1" "$2" "$#"
      showMissing
      exit 0;;
   c) # overwrite CLONE to be up to date with REAL
      shift
      getVariables "$1" "$2" "$#"
      getTargetFiles
      overwriteClone
      exit 0;;
   r) # overwrite REAL to be up to date with CLONE
      shift
      getVariables "$1" "$2" "$#"
      getTargetFiles
      overwriteReal
      exit 0;;
   d) # print variables, debug only
      shift
      getVariables "$1" "$2" "$#"
      echo "\$REAL=\"$REAL\""
      echo "\$CLONE=\"$CLONE\""
      exit 0;;
   \?) # invalid option
      echo "$prname: invalid option." >&2
      exit 1;;
   esac
done
